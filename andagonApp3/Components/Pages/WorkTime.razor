@page "/worktime"
@rendermode InteractiveServer
@using andagonApp3.Models
@using MongoDB.Driver
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "User")]

<PageTitle>Arbeitszeiterfassung</PageTitle>

<h3>Arbeitszeiterfassung</h3>

<EditForm Model="Input" OnValidSubmit="SaveEntry" class="mb-4">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-3">
        <div class="col-6 col-md-3">
            <InputDate @bind-Value="Input.Date" class="form-control" />
        </div>
        <div class="col-6 col-md-2">
            <InputText @bind-Value="Input.Start" type="time" class="form-control" />
        </div>
        <div class="col-6 col-md-2">
            <InputText @bind-Value="Input.End" type="time" class="form-control" />
        </div>
        <div class="col-md-5">
            <InputText @bind-Value="Input.Description" class="form-control" placeholder="Beschreibung" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Buchen</button>
</EditForm>

<h4>Buchungen</h4>
<div class="mb-2">
    <input type="month" value="@selectedMonth.ToString("yyyy-MM")" @onchange="MonthChanged" class="form-control" style="width:auto" />
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Datum</th>
            <th>Start</th>
            <th>Ende</th>
            <th>Dauer (h)</th>
            <th>Beschreibung</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var e in entries)
        {
            <tr>
                <td>@e.Date.ToString("yyyy-MM-dd")</td>
                <td>@e.StartTime.ToString("HH:mm")</td>
                <td>@e.EndTime.ToString("HH:mm")</td>
                <td>@((e.EndTime - e.StartTime).TotalHours.ToString("0.##"))</td>
                <td>@e.Description</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private EntryModel Input = new();
    private List<TimeEntry> entries = new();
    private DateTime selectedMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);

    protected override async Task OnInitializedAsync()
    {
        await LoadEntriesAsync();
    }

    private async Task SaveEntry()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (userId == null) return;

        var entry = new TimeEntry
        {
            UserId = userId,
            Date = Input.Date.Date,
            StartTime = Input.Date.Date + TimeSpan.Parse(Input.Start),
            EndTime = Input.Date.Date + TimeSpan.Parse(Input.End),
            Description = Input.Description
        };
        await DBManager.CreateAsync(DocumentType.TimeEntry, entry);
        Input = new();
        await LoadEntriesAsync();
    }

    private async Task LoadEntriesAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (userId == null) return;

        var start = selectedMonth;
        var end = start.AddMonths(1).AddTicks(-1);
        var filter = Builders<TimeEntry>.Filter.And(
            Builders<TimeEntry>.Filter.Eq(e => e.UserId, userId),
            Builders<TimeEntry>.Filter.Gte(e => e.Date, start),
            Builders<TimeEntry>.Filter.Lte(e => e.Date, end));
        entries = await DBManager.FindAsync(DocumentType.TimeEntry, filter);
        entries = entries.OrderBy(e => e.Date).ThenBy(e => e.StartTime).ToList();
    }

    private async Task MonthChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString() + "-01", out var dt))
        {
            selectedMonth = new DateTime(dt.Year, dt.Month, 1);
            await LoadEntriesAsync();
        }
    }

    private class EntryModel
    {
        [Required]
        public DateTime Date { get; set; } = DateTime.Today;
        [Required]
        public string Start { get; set; } = "";
        [Required]
        public string End { get; set; } = "";
        public string? Description { get; set; }
    }
}
